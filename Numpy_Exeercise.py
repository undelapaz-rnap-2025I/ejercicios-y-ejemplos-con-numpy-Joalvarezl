# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iKRG78_MOCOwMvNt5EAhKchT3S9VM7DZ

# Numpy_Exercise
"""

import numpy as np
import matplotlib.pyplot as plt

arr_1d = np.array([10, 20, 30, 40, 50])
print(arr_1d[2])

print(arr_1d[1:4])

arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arr_2d[1, 2])

print(arr_2d[:2, 1:])

tensor_3d = np.array([[[1,2,3], [4,5,6]],
                      [[7,8,9], [10,11,12]],
                      [[13,14,15], [16,17,18]]])
print(tensor_3d[1, 0, 2])
print(tensor_3d[1])

tensor_3x3x3 = np.arange(27).reshape(3, 3, 3)
print(tensor_3x3x3[1])
print("\n")
print(tensor_3x3x3[:, 1, :])
print("\n")
print(tensor_3x3x3[:, :, 2])

tensor_4d = np.arange(48).reshape(2, 3, 2, 4)
print(tensor_4d[1, 2, 1, 3])
print("\n")
print(tensor_4d[1, 2])

print(tensor_4d[1])
print("\n")
print(tensor_4d[:, 2, :, :])
print("\n")
print(tensor_4d[:, :, 0, :])

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
print(A + B)

print(np.dot(A, B))

print(A.T)

print(np.linalg.det(A))
print(np.linalg.inv(A))

autovalores, autovectores = np.linalg.eig(A)
print(autovalores)
print(autovectores)

A_sistema = np.array([[2, 1], [1, 1]])
b_sistema = np.array([3, 2])
solucion_x = np.linalg.solve(A_sistema, b_sistema)
print(solucion_x)

np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)
X_b = np.c_[np.ones((100, 1)), X]
learning_rate = 0.1
n_iterations = 1000
m = 100
theta = np.random.randn(2, 1)
for iteration in range(n_iterations):
    gradients = 2 / m * X_b.T.dot(X_b.dot(theta) - y)
    theta = theta - learning_rate * gradients
print(theta)

def greet(name):
    return "Hello, " + name + "!"
print(greet("Ana"))

def add_numbers(a, b):
    return a + b
print(add_numbers(5, 7))

def power(base, exponent=2):
    return base ** exponent
print(power(3))
print(power(2, 3))

def min_max(numbers):
    return min(numbers), max(numbers)
nums = [4, 9, 2, 7, 5]
minimum, maximum = min_max(nums)
print(minimum, maximum)

def area_of_rectangle(length, width):
    """Calculates the area of a rectangle."""
    return length * width
print(area_of_rectangle(6, 8))

class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def bark(self):
        print(f"{self.name} is barking")
dog1 = Dog("Buddy", 3)
dog1.bark()

class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.grades = []
    def add_grades(self, grade):
        self.grades.append(grade)
    def get_average_grade(self):
        return sum(self.grades) / len(self.grades) if self.grades else 0
student1 = Student("Alice", 18)
student1.add_grades(85)
student1.add_grades(92)
print(f"{student1.name}'s average: {student1.get_average_grade()}")

class Animal:
    def __init__(self, name):
        self.name = name
    def speak(self):
        pass
class Cat(Animal):
    def speak(self):
        print(f"{self.name} says Meow!")
class Dog(Animal):
    def speak(self):
        print(f"{self.name} says Woof!")
cat = Cat("Whiskers")
dog = Dog("Buddy")
cat.speak()
dog.speak()

arr_ej1 = np.array([3, 7, 1, 9, 5])
print(arr_ej1[2])
print(arr_ej1[1:4])
arr_ej1[3] = 12
print(arr_ej1)

matriz_ej1 = np.arange(1, 10).reshape(3, 3)
print(matriz_ej1[1, 2])
print(matriz_ej1[:2, :])

tensor_ej2 = np.arange(1, 37).reshape(3, 3, 4)
print(tensor_ej2[1, 0, 2])
print(tensor_ej2[1])
print(tensor_ej2[1:, 2, :])
print(tensor_ej2[2, 1, 3])
print(tensor_ej2[1:, 0, :])

def calculate_average(numbers):
    return sum(numbers) / len(numbers) if numbers else 0
def find_power(base, exponent=2):
    return base ** exponent
lista_nums = [4, 6, 7, 8, 3, 4, 9, 1]
print(calculate_average(lista_nums))
print(find_power(8))
print(find_power(4, 4))

X_ej4 = np.array([1, 2, 3, 4, 5])
y_ej4 = np.array([3, 6, 8, 11, 13])
learning_rate_ej4 = 0.01
n_iterations_ej4 = 1000
m_ej4 = len(X_ej4)
X_b_ej4 = np.c_[np.ones((m_ej4, 1)), X_ej4.reshape(-1, 1)]
y_b_ej4 = y_ej4.reshape(-1, 1)
np.random.seed(42)
theta_ej4 = np.random.randn(2, 1)
theta_0_progress = []
theta_1_progress = []
for iteration in range(n_iterations_ej4):
    gradients = 2 / m_ej4 * X_b_ej4.T.dot(X_b_ej4.dot(theta_ej4) - y_b_ej4)
    theta_ej4 = theta_ej4 - learning_rate_ej4 * gradients
    theta_0_progress.append(theta_ej4[0, 0])
    theta_1_progress.append(theta_ej4[1, 0])
print("Theta final:\n", theta_ej4)
plt.figure(figsize=(10, 8))
plt.subplot(2, 1, 1)
plt.plot(range(n_iterations_ej4), theta_0_progress, label=r'$\theta_0$')
plt.title('Progreso $\\theta_0$')
plt.xlabel('Iteraciones'); plt.ylabel('$\\theta_0$')
plt.grid(True); plt.legend()
plt.subplot(2, 1, 2)
plt.plot(range(n_iterations_ej4), theta_1_progress, 'g', label=r'$\theta_1$')
plt.title('Progreso $\\theta_1$')
plt.xlabel('Iteraciones'); plt.ylabel('$\\theta_1$')
plt.grid(True); plt.legend()
plt.tight_layout(); plt.show()